name: Test Containers

permissions:
  contents: read

on:
  push:
    branches:
      - master
    pull_request:
      branches:
        - master

env:
  REPO_ROOT: ${{ github.workspace }}

jobs:
  program-runner:
    name: Program Runner
    runs-on: ubuntu-22.04
    env:
      IMAGE_NAME: program-runner
      IMAGE_TAG: test
    outputs:
      program-runner-image: ${{ steps.build.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python Dependencies
        run: |
          pip install --upgrade pip
          pip install -r $REPO_ROOT/tests/requirements.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        id: build
        run: |
          docker build -f $REPO_ROOT/program-runner/docker/program-runner.Dockerfile \
          -t $IMAGE_NAME:$IMAGE_TAG $REPO_ROOT/program-runner/
          echo "image=$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run Container
        run: |
          # Run container detached
          docker run -d --name $IMAGE_NAME -p 8080:8080 $IMAGE_NAME:$IMAGE_TAG
          sleep 5

      - name: Test /program/start
        run: |
          RESPONSE=$(curl -s -X POST http://localhost:8080/program/start \
          -H "Content-Type: application/json" \
          -d '{
            "programName": "Test",
            "displayName": "Test",
            "description": "Test Program, exits instantly",
            "category": "Tests",
            "settings": [
              {
                "argName": "waitTime",
                "displayName": "Wait Time",
                "value": 10
              },
              {
                "argName": "testString",
                "displayName": "Test String",
                "value": "Testing..."
              }
            ]
          }')

          echo "Response: $RESPONSE"
  
          if [ "$RESPONSE" != '{"status":"started"}' ]; then
            echo "Test failed"
            exit 1
          fi

#      - name: Test /program/status
#        run: |
#          python $REPO_ROOT/tests/test_status_ws.py
#
#      - name: Test /program/output
#        run: |
#          python $REPO_ROOT/tests/test_output_ws.py

      - name: Test /program/kill
        run: |
          curl -s -X POST http://localhost:8080/program/start \
          -H "Content-Type: application/json" \
          -d '{
            "programName": "Test",
            "displayName": "Test",
            "description": "Test Program, exits instantly",
            "category": "Tests",
            "settings": [
              {
                "argName": "waitTime",
                "displayName": "Wait Time",
                "value": 1000
              },
              {
                "argName": "testString",
                "displayName": "Test String",
                "value": "Testing..."
              }
            ]
          }'
          
          sleep 5
          
          RESPONSE=$(curl -s -X POST http://localhost:8080/program/kill)
          
          echo "Response: $RESPONSE"
  
          if [ "$RESPONSE" != '{"status":"killed"}' ]; then
            echo "Test failed"
            exit 1
          fi

      - name: Stop Container
        run: |
          docker stop $IMAGE_NAME
          docker rm $IMAGE_NAME
          

  mongodb:
    name: MongoDB
    runs-on: ubuntu-22.04
    env:
      IMAGE_NAME: mongodb
      IMAGE_TAG: test
    outputs:
      mongodb-image: ${{ steps.build.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        id: build
        run: |
          docker build -f $REPO_ROOT/database/database.Dockerfile \
          -t $IMAGE_NAME:$IMAGE_TAG $REPO_ROOT/database/
          echo "image=$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run Container
        run: |
          # Run container detached
          docker run -d --name $IMAGE_NAME -p 27017:27017 $IMAGE_NAME:$IMAGE_TAG
          sleep 5

      - name: Stop Container
        run: |
          docker stop $IMAGE_NAME
          docker rm $IMAGE_NAME


  webui:
    name: WebUI
    runs-on: ubuntu-22.04
#    needs:
#      - program-runner
#      - mongodb
    env:
      IMAGE_NAME: webui
      IMAGE_TAG: test
    outputs:
      frontend-image: ${{ steps.build.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        id: build
        run: |
          docker build -f $REPO_ROOT/webui/docker/webui.Dockerfile \
          -t $IMAGE_NAME:$IMAGE_TAG $REPO_ROOT/webui/
          echo "image=$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run Container
        run: |
          # Run container detached
          docker run -d --name $IMAGE_NAME -p 27017:27017 $IMAGE_NAME:$IMAGE_TAG
          sleep 5

      - name: Stop Container
        run: |
          docker stop $IMAGE_NAME
          docker rm $IMAGE_NAME

  deploy-stack:
    name: Docker Compose Stack
    runs-on: ubuntu-22.04
    needs:
      - program-runner
      - mongodb
      - webui
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create env
        run: |
          echo "PROGRAM_RUNNER_IMAGE=${{ needs.program-runner.outputs.program-runner-image }}" >> $GITHUB_ENV
          echo "MONGODB_IMAGE=${{ needs.mongodb.outputs.mongodb-image }}" >> $GITHUB_ENV
          echo "WEBUI_IMAGE=${{ needs.webui.outputs.frontend-image }}" >> $GITHUB_ENV

      - name: Run Docker Compose
        run: |
          docker compose -f $REPO_ROOT/tests/docker-compose.yml up -d
          docker compose -f $REPO_ROOT/tests/docker-compose.yml ps