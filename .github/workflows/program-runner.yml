name: Program Runner
on:
  push:
    branches:
      - master
    pull_request:
      branches:
        - master

env:
  REPO_ROOT: ${{ github.workspace }}

jobs:
  build-image:
    name: Test Program Runner
    runs-on: ubuntu-22.04
    outputs:
      image: ${{ steps.build.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python Dependencies
        run: |
          pip install --upgrade pip
          pip install -r $REPO_ROOT/tests/requirements.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        id: build
        run: |
          IMAGE_NAME=program-runner:test
          docker build -f $REPO_ROOT/program-runner/build/program-runner.Dockerfile \
          -t $IMAGE_NAME $REPO_ROOT/program-runner/

      - name: Run container
        run: |
          IMAGE_NAME=program-runner:test
          # Run container detached
          docker run -d --name test-runner -p 8080:8080 $IMAGE_NAME
          sleep 5

      - name: Test /program/start
        run: |
          RESPONSE=$(curl -s -X POST http://localhost:8080/program/start \
          -H "Content-Type: application/json" \
          -d '{
            "programName": "Test",
            "displayName": "Test",
            "description": "Test Program, exits instantly",
            "category": "Tests",
            "settings": [
              {
                "argName": "waitTime",
                "displayName": "Wait Time",
                "value": 10
              },
              {
                "argName": "testString",
                "displayName": "Test String",
                "value": "Testing..."
              }
            ]
          }')

          echo "Response: $RESPONSE"
  
          if [ "$RESPONSE" != '{"status":"started"}' ]; then
            echo "Test failed"
            exit 1
          fi

#      - name: Test /program/status
#        run: |
#          python $REPO_ROOT/tests/test_status_ws.py
#
#      - name: Test /program/output
#        run: |
#          python $REPO_ROOT/tests/test_output_ws.py

      - name: Test /program/kill
        run: |
          curl -s -X POST http://localhost:8080/program/start \
          -H "Content-Type: application/json" \
          -d '{
            "programName": "Test",
            "displayName": "Test",
            "description": "Test Program, exits instantly",
            "category": "Tests",
            "settings": [
              {
                "argName": "waitTime",
                "displayName": "Wait Time",
                "value": 1000
              },
              {
                "argName": "testString",
                "displayName": "Test String",
                "value": "Testing..."
              }
            ]
          }'
          
          sleep 5
          
          RESPONSE=$(curl -s -X POST http://localhost:8080/program/kill)
          
          echo "Response: $RESPONSE"
  
          if [ "$RESPONSE" != '{"status":"killed"}' ]; then
            echo "Test failed"
            exit 1
          fi

      - name: Stop container
        run: |
          docker stop test-runner
          docker rm test-runner